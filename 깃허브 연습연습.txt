git
기능이 좀 더 많다
필요한 것 대부분이 있다
대부분 python으로 만듬
대부분 os와 친함
mercurial
컴팩트하다
쉽게 새로운 명령을 만들수 있다
c와 perl을 이용하여 만듬
리눅스 친화적

Git의 목적
버전관리,백업,협업

changes(또는 Unstaged Area) : 변경된 사항이 표시되는 영역
Staged Changes(또는 Staging area) : 버전으로 관리할 파일들이 모여있는 영역
repository(저장소) : 생성한 버전들이 모여 있는 저장소

git init - Local 새로운 저장소 만들기
git add . : 해당 파일들이 stage 영역으로 변경
git commit -m 'first commit' (여기서 -m은 message를 뜻한다) : 새로운 버전 생성
git log : 내가 생성한 버전 확인하기
	OPTION
	--all : branch 포함 모든 정보 보기
	--oneline : 간략히 설명
	--graph : 그래프 형태로
git -help : 사용법, 모든 명령어 정보
git reset -h 터미널에 reset의 명령어 도움말 제공

HEAD : git이 바라보는 마지막 commit 위치
Index : commit 관련된 내용이 기록된 캐시(임시 메모리) dircache,cache,staging area 등 다양한 용어를 혼용해서 사용
working tree : 동일한 git 저장소 .git이 설치된 폴더

git restore --staged [파일이름] : Stage 영역에서 파일을 내리는 방법
git restore [파일이름] : 수정된 모든 내용을 원본으로 돌리기

git reset :이전 버전으로 돌아가고 싶을때 사용
	--hard : 돌아간 commit 이후의 모든 버전 삭제
	--soft : 변경 이력은 모두 삭제하지만, stage에 남아 있음(새로운 commit을 생성하여 버전관리)
	--mixed : 변경 이력 모두 삭제, 변경 내용은 Changes 영역에 남아있음

git revert : commit을 보존하면서 이전 버전으로 돌아가려는 경우

branch : 작업분기 (불확실성을 포함해야 하는 상황)
	-a 
	git branch -d 브랜치 이름 브랜치 삭제(삭제해도 log는 남아있음)
	-D 브랜치삭제
	-m 브랜치 및 해당 리프로그 이동/이름 바꾸기(참조)
	-M 대상이 존재하는 경우에도 분기 이동/이름 바꾸기
	-C 대상이 존재하는 경우에도 브랜치 복사
	-l 브랜치 리스트
	--show-current  현재 브랜치 이름
	git branch 브랜치 이름 : 새로운 브랜치 생성
	checkout 브랜치 이름 : 새로 만든 브랜치로 이동
	git merge [옵션] 땡겨올 브랜치 이름(index에 아무것도 없어야됨(commit 안하면 stash 활용))
		먼저 병합 이후 남게 될 브랜치로 이동) : 브랜치들을 병합 
		병합에서의 충돌 해결 : 원인 서로 같은 코드를 추가수정삭제한 경우 git 스스로 해결 못하고 merge 하는 
		사람에게 해결 요구(누구의 코드를 적용해야 할지 모름)
	취소 git reset --merge 현재 브랜치에서 돌아갈 commit 해시


로컬 -commit
원격 -push

git config 명령을 이용하여 사용자 정보 관리
cat ~/.gitconfig : 제대로 등록되었는지 확인
git config --global 옵션으로 지정한 user.name과 user.email 정보를 기본값으로 활용
git config --global --unset user.name/email : git 사용자 정보 삭제
git commit --author=＇username <email@example.com>' -m ‘new commit' : 특정 Commit에 사용자 정보를 직접 지정

이메일은 유일한 식별자

원격 저장소 추가방법
git remote add [<options>] <name>(보통 origin) <url>
git remote -v : 제대로 연결이 되었는지 확인
git remote remove 원격저장소 이름 : 원격 저장소 삭제
git push -u(set upstream for git pull/status ) 원격저장소 이름(보통 origin), 원격저장소의 브랜치 이름

새로운 컴퓨터에 내 원격 저장소 저장하기
git clone 원격저장소 주소


pull : 땡겨오기
fetch : 원격 저장소에 변경 사항이 있는지 확인
pull : fetch 작업 수행 -> 변경사항이 있으면 모든 정보를 로컬 git으로 복사
git fetch -v(조사느낌) 원격저장소이름 : 변경사항이 있나 확인
git pull 원격저장소이름 원격 브랜치 : 변경사항을 로컬에 적용하기

UI의 분야와 특징 구분해서 객관식
UI 기본 원칙
시분설_이름_학번.pptx

https 인증 
GCM : GitHub에서 사용하는 자격 증명을 캐싱해주는 기능
403 에러 : 서버에 요청이 전달되었지만, 권환 때문에 거절
